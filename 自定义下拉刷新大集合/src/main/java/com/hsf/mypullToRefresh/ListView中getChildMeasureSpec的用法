 回顾MeasureSpec的知识点：
1、measureSpec方法通常在ViewGroup中用到，一个MeasureSpec封装了父布局传递给子布局的布局要求，每个MeasureSpec代表了一组宽度和高度的要求。
一个MeasureSpec由大小和模式组成。它有三种模式：UNSPECIFIED(未指定),父元素不对子元素施加任何束缚，子元素可以得到任意想要的大小；EXACTLY(完全)，
父元素决定子元素的确切大小，子元素将被限定在给定的边界里而忽略它本身大小；AT_MOST(至多)，子元素至多达到指定大小的值。

2、注意，使用EXACTLY和AT_MOST通常是一样的效果，如果你要区别他们，那么你就要使用函数View.resolveSize(int size,int measureSpec)
返回一个size值，然后使用你的view调用setMeasuredDimension(int,int)函数。

3、ViewGroup.getChildMeasureSpec(int spec, int padding, int childDimension)
计算MeasureSpec然后传递到特定的子视图，此方法用来计算一个合适子视图的尺寸大小（宽度或者高度)，
此方法的目的在于结合我们从子视图的LayoutParams所给出的MeasureSpec信息来获取最合适的结果。
比如，如果这个View知道自己的大小尺寸（因为它本身的MeasureSpec的model为Exactly,）并且子视图的大小恰好跟父窗口一样大，父窗口必须用给定的大小去layout子视图
    参数：
     spec 父窗口传递给子视图的大小和模式
     padding 父窗口的边距，也就是xml中的Android:padding
     childDimension 子视图想要绘制的准确大小，但最终不一定绘制此值


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

比较好的总结：
一个MeasureSpec封装了父布局传递给子布局的布局要求，每个MeasureSpec代表了一组宽度和高度的要求。一个MeasureSpec由大小和模式组成。
它有三种模式：UNSPECIFIED(未指定),父元素不对子元素施加任何束缚，子元素可以得到任意想要的大小；EXACTLY(完全)，父元素决定子元素的确切大小，
子元素将被限定在给定的边界里而忽略它本身大小；AT_MOST(至多)，子元素至多达到指定大小的值。

　　它常用的三个函数：
　　1.static int getMode(int measureSpec):根据提供的测量值(格式)提取模式(上述三个模式之一)
　　2.static int getSize(int measureSpec):根据提供的测量值(格式)提取大小值(这个大小也就是我们通常所说的大小)
　　3.static int makeMeasureSpec(int size,int mode):根据提供的大小值和模式创建一个测量值(格式)
   这个类的使用呢，通常在view组件的onMeasure方法里面调用但也有少数例外，看看几个例子：

     a.首先一个我们常用到的一个有用的函数，View.resolveSize(int size,int measureSpec)

    public static int resolveSize(int size, int measureSpec) {
         int result = size;
         int specMode = MeasureSpec.getMode(measureSpec);
         int specSize =  MeasureSpec.getSize(measureSpec);
         switch (specMode) {
         case MeasureSpec.UNSPECIFIED:
             result = size;
             break;
         case MeasureSpec.AT_MOST:
             result = Math.min(size, specSize);
             break;
         case MeasureSpec.EXACTLY:
             result = specSize;
             break;
         }
         return result;
     }

　   上面既然要用到measureSpec值，那自然表示这个函数通常是在onMeasure方法里面调用的。简单说一下，这个方法的主要作用就是根据你提供的大小和模式，
     返回你想要的大小值，这个里面根据传入模式的不同来做相应的处理。

　　 再看看MeasureSpec.makeMeasureSpec方法，实际上这个方法很简单：
     public static int makeMeasureSpec(int size, int mode) {
         return size + mode;
    }

    这样大家不难理解size跟measureSpec区别了。看看它的使用ListView.measureItem(View child)，这是ListView内部测量item的方法

    private void measureItem(View child) {
         ViewGroup.LayoutParams p = child.getLayoutParams();
         if (p == null) {
             p = new ViewGroup.LayoutParams(
                     ViewGroup.LayoutParams.MATCH_PARENT,
                     ViewGroup.LayoutParams.WRAP_CONTENT);
         }

         int childWidthSpec = ViewGroup.getChildMeasureSpec(mWidthMeasureSpec,
                 mListPadding.left + mListPadding.right, p.width);
         int lpHeight = p.height;
         int childHeightSpec;
         if (lpHeight > 0) {
             childHeightSpec = MeasureSpec.makeMeasureSpec(lpHeight, MeasureSpec.EXACTLY);
         } else {
             childHeightSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);
         }
         child.measure(childWidthSpec, childHeightSpec);
     }
    发现的问题
    1、childHeightSpec用makeMeasureSpec获取，而childWidthSpec采用getChildMeasureSpec获取，在getChildMeasureSpec内部也是调用了makeMeasureSpec方法，
      只是讨论的情况多了一点，为何childHeightSpec和childWidthSpec要区别对待？
      回答：因为listView不限制高度。child有多高，listView就给它多高的空间。但是listView是限制宽度的，所以需要getChildMeasureSpec

   2、ViewGroup.getChildMeasureSpec(int spec, int padding, int childDimension)
     计算MeasureSpec然后传递到特定的子视图，此方法用来计算一个合适子视图的尺寸大小（宽度或者高度)，
     此方法的目的在于结合我们从子视图的LayoutParams所给出的MeasureSpec信息来获取最合适的结果。
     比如，如果这个View知道自己的大小尺寸（因为它本身的MeasureSpec的model为Exactly,）并且子视图的大小恰好跟父窗口一样大，父窗口必须用给定的大小去layout子视图
     参数：
           spec 父窗口传递给子视图的大小和模式
           padding 父窗口的边距，也就是xml中的android:padding
           childDimension 子视图想要绘制的准确大小，但最终不一定绘制此值

　　measureSpec方法通常在ViewGroup中用到，它可以根据模式(MeasureSpec里面的三个)可以调节子元素的大小。

　　注意，使用EXACTLY和AT_MOST通常是一样的效果，如果你要区别他们，那么你就要使用上面的函数View.resolveSize(int size,int measureSpec)返回一个size值，
    然后使用你的view调用setMeasuredDimension(int,int)函数。

     protected final void setMeasuredDimension(int measuredWidth, int measuredHeight) {
            mMeasuredWidth = measuredWidth;
            mMeasuredHeight = measuredHeight;
            mPrivateFlags |= MEASURED_DIMENSION_SET;
     }

       然后调用view.getMeasuredWidth，view.getMeasuredHeigth 返回的就是上面函数里的mMeasuredWidth,mMeasuredHeight的值。


