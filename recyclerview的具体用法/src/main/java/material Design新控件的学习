1、CoordinatorLayout:

它是组织众多子view协调的ViewGroup
CoordinatorLayout 的神奇之处就在于 Behavior 对象。怎么理解呢？CoordinatorLayout使得子view之间知道了彼此的存在，
一个子view的变化可以通知到另一个子view，CoordinatorLayout 所做的事情就是当成一个通信的桥梁，连接不同的view，使用 Behavior 对象进行通信。

CoordinatorLayout的使用核心是Behavior，Behavior就是执行你定制的动作。在讲Behavior之前必须先理解两个概念：Child和Dependency，
什么意思呢？Child当然是子View的意思了，是谁的子View呢，当然是CoordinatorLayout的子View；其实Child是指要执行动作的CoordinatorLayout的子View。
而Dependency是指Child依赖的View.简而言之，就是如果Dependency这个View发生了变化，那么Child这个View就要相应发生变化。发生变化是具体发生什么变化呢？
这里就要引入Behavior，Child发生变化的具体执行的代码都是放在Behavior这个类里面。

怎么使用Behavior呢，首先，我们定义一个类，继承CoordinatorLayout.Behavior<T>,其中，泛型参数T是我们要执行动作的View类，
也就是Child。然后就是去实现Behavior的两个方法：
/**
* 判断child的布局是否依赖dependency
*/
   @Override
 public boolean layoutDependsOn(CoordinatorLayout parent, T child, View dependency) {
    boolean rs;
    //根据逻辑判断rs的取值
    //返回false表示child不依赖dependency，ture表示依赖
    return rs;
}

/**
* 当dependency发生改变时（位置、宽高等），执行这个函数
* 返回true表示child的位置或者是宽高要发生改变，否则就返回false
*/
@Override
public boolean onDependentViewChanged(CoordinatorLayout parent, T child, View dependency) {
     //child要执行的具体动作
        return true;
}


比如：在CoordinatorLayout中使用AppBarLayout，如果AppBarLayout的子View（如ToolBar、TabLayout）标记了app:layout_scrollFlags滚动事件,
那么在CoordinatorLayout布局里其它标记了app:layout_behavior的子View（LinearLayout、RecyclerView、NestedScrollView等）
就能够响应（如ToolBar、TabLayout）控件被标记的滚动事件。

<android.support.design.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/coordinator_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <android.support.design.widget.AppBarLayout
        android:id="@+id/appbar_layout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:fitsSystemWindows="true">
        <android.support.v7.widget.Toolbar
            android:id="@+id/toolBar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:background="#30469b"
            app:layout_scrollFlags="scroll|enterAlways" />
        <android.support.design.widget.TabLayout
            ......
             />
    </android.support.design.widget.AppBarLayout>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical"
        android:scrollbars="none"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">
 <!-- content view .....-->
    </LinearLayout>

</android.support.design.widget.CoordinatorLayout>
上面这段代码中，ToolBar标记了layout_scrollFlags滚动事件，那么当LinearLayout滚动时便可触发ToolBar中的layout_scrollFlags效果。
即往上滑动隐藏ToolBar，下滑出现ToolBar，而不会隐藏TabLayout，因为TabLayout没有标记scrollFlags事件，
相反，如果TabLayout也标记了ScrollFlags事件，那么LinearLayout的下滑时ToolBar和TabLayout都会隐藏了。

layout_scrollFlags中的几个值：
scroll: 所有想滚动出屏幕的view都需要设置这个flag， 没有设置这个flag的view将被固定在屏幕顶部。
enterAlways:这个flag让任意向下的滚动都会导致该view变为可见，启用快速“返回模式”。
enterAlwaysCollapsed:当你的视图已经设置minHeight属性又使用此标志时，你的视图只能已最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。
exitUntilCollapsed:滚动退出屏幕，最后折叠在顶端。


【注意】: 设置了layout_scrollFlags标志的View必须在没有设置的View的之前定义，这样可以确保设置过的View都从上面移出, 只留下那些固定的View在下面。

说到TabLayout，就是实现多个Tab之间的切换，不过Google在Design library新推出的TabLayout既实现了固定的选项卡 - (Tab的宽度平均分配)，
也实现了可滚动的选项卡 - (Tab宽度不固定，同时可以横向滚动)，还实现了所有Tab居中显示。它还有一个重要作用就是结合ViewPager来实现多个Tab之间的切换。
来看看TabLayout的三种实现方式：
1、固定的Tab，根据TabLayout的宽度适配
2、固定的Tab，在TabLayout中居中显示
3、可滑动的Tab
tabGravity—Tab的重心，有填充和居中两个值，为别为fill和center。
tabMode—Tab的模式，有固定和滚动两个模式，分别为 fixed 和 scrollable。
tabTextColor  —设置默认状态下Tab上字体的颜色。
tabSelectedTextColor  —设置选中状态下Tab上字体的颜色

2、RecyclerView的使用技巧
下面说说使用RecyclerView的优点和能做什么事：
优点：1、提供一种插件式编程，开发者对RecyclerView的设计更加自由
     2、强制开发者使用ViewHolder模式，性能更优
     3、可以用来实现ListView、GridView、横向ScrollView、瀑布流等功能，非常灵活
RecyclerView主要的方法：

setLayoutManager设置RecyclerView的布局管理器，默认给我们提供了三种： LinearLayoutManager、GridLayoutManager、StaggeredGridLayoutManager。
    当然也可以继承LayoutManager来自定义。
setItemAnimator  设置item的添加、删除动画效果，默认给我们提供了一种默认动画效果：DefaultItemAnimator。同理也可以我们自己自定义想要的动画效果。
addItemDecoration  添加item之间的分隔线，默认没有提供类给我们使用，如果需要使用到分割线则需要我们自定义。
setAdapter设置RecyclerView的适配器，这个需要我们自己继承RecyclerView.Adapter来实现。
RecyclerView中默认没有提供onItemClick和onItemLongClick点击事件方法，需要我们自己在适配器中写接口来实现。
需要注意的是在RecyclerView中添加和删除item时，要想有动画效果，则需要使用adapter.notifyItemInserted();和adapter.notifyItemRemoved();

注意，在RecyclerView中如何获得当前显示的第一条的item是哪一个下标：
我们在使用RecyclerView时，更多的是通过网络请求得到数据，比如在加载图片或者列表项时，我们往往需要判断当前屏幕上显示的第一个item的position是多少，
最后一个item的position是多少，当前屏幕共显示了几个item项，如果使用ListView或者GridView来判断当然好判断，只要实现AbsListView.OnScrollListener这个
接口就可以得到，那么在RecyclerView中如何得到呢？RecyclerView中只提供了一个滚动监听器addOnScrollListener，
并且不能实现AbsListView.OnScrollListener这个接口，那怎么获取呢？就是通过RecyclerView中的LayoutManager，
我们使用RecyclerView时候都必须设置一个LayoutManager布局管理器，通过它我们可以轻松的得到当前屏幕共有几个item，
第一个item的position等数据，即
int firstIndex = mLayoutManager.findFirstVisibleItemPosition();//返回当前屏幕第一个显示的item的position
int firstComIndex = mLayoutManager.findFirstCompletelyVisibleItemPosition();//返回当前屏幕第一个完全显示的item的position
int lastIndex = mLayoutManager.findLastVisibleItemPosition();//返回当前屏幕最后一个显示的item的position
int lastComIndex = mLayoutManager.findLastCompletelyVisibleItemPosition();//返回当前屏幕最后一个完全显示的item的position
View view = mLayoutManager.findViewByPosition(int position);//返回对应position的itemView

3、AppBarLayout
AppBarLayout继承自LinearLayout，布局方向为垂直方向。所以你可以把它当成垂直布局的LinearLayout来使用。
AppBarLayout是在LinearLayout上加了一些材料设计的概念，它可以让你定制当某个可滚动View的滚动手势发生变化时，其内部的子View实现何种动作。

请注意：上面提到的某个可滚动View，可以理解为某个ScrollView。怎么理解上面的话呢？就是说，当某个ScrollView发生滚动时，
你可以定制你的“顶部栏”应该执行哪些动作（如跟着一起滚动、保持不动等等）。那某个可移动的View到底是哪个可移动的View呢？

内部的子View通过在布局中加app:layout_scrollFlags设置执行的动作，那么app:layout_scrollFlags可以设置哪些动作呢？分别如下：
(1)  scroll:值设为scroll的View会跟随滚动事件一起发生移动。
什么意思呢？简单的说，就是当指定的ScrollView发生滚动时，该View也跟随一起滚动，就好像这个View也是属于这个ScrollView一样。

(2)  enterAlways:值设为enterAlways的View,当ScrollView往下滚动时，该View会直接往下滚动。而不用考虑ScrollView是否在滚动。

(3)  exitUntilCollapsed：值设为exitUntilCollapsed的View，当这个View要往上逐渐“消逝”时，会一直往上滑动，
    直到剩下的的高度达到它的最小高度后，再响应ScrollView的内部滑动事件。
    怎么理解呢？简单解释：在ScrollView往上滑动时，首先是View把滑动事件“夺走”，由View去执行滑动，直到滑动最小高度后，
    把这个滑动事件“还”回去，让ScrollView内部去上滑。

(4) enterAlwaysCollapsed：是enterAlways的附加选项，一般跟enterAlways一起使用，它是指，View在往下“出现”的时候，首先是enterAlways效果，
    当View的高度达到最小高度时，View就暂时不去往下滚动，直到ScrollView滑动到顶部不再滑动时，View再继续往下滑动，直到滑到View的顶部结束。
    android:attr/actionBarSize,app:layout_scrollFlags="scroll|enerAlways|enterAlwaysCollapsed"

4、CollapsingToolbarLayout
    它是对ToolBar进行再次封装的ViewGroup，主要用于实现折叠AppBar的效果，它需要放到AppBarLayout的布局内，并作为其的直接
    子view，CollapsingToolbarLayout主要包括几个功能
    (1) 折叠Title（Collapsing title）：当布局内容全部显示出来时，title是最大的，但是随着View逐步移出屏幕顶部，
        title变得越来越小。你可以通过调用setTitle函数来设置title。
    (2)内容纱布（Content scrim）：根据滚动的位置是否到达一个阀值，来决定是否对View“盖上纱布”。可以通过
        setContentScrim(Drawable)来设置纱布的图片.
    (3)状态栏纱布（Status bar scrim)：根据滚动位置是否到达一个阀值决定是否对状态栏“盖上纱布”，你可以通过
        setStatusBarScrim(Drawable)来设置纱布图片，但是只能在LOLLIPOP设备上面有作用。
    (4)视差滚动子view（parallax Scrolling Children）:子View可以选择在当前的布局当时是否以“视差”的方式来跟随滚动
        （其实就是让这个子View的滚动速度比其他正常滚动View的速度缓慢一些，这样看起来就出现了一种视差效果）
        将布局参数App:layout_collapseMode的值写为parallax就可以了
    （5）将子View的位置固定，子View可以选择是否在全局空间上固定位置，这对于ToolBar来说是非常有用的，因为在布局移动时，
        ToolBar可以不受影响的固定在某一位置，将布局参数app:layout_collapseMode改为pin即可
    (6)如果你希望拖动过程中状态栏是透明的，可以在CollapsingToolbarLayout中加 app:statusBarScrim="@android:color/transparent"，
        并且在onCreate中调用getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)将状态栏设置为透明就好啦~
    (7)CollapsingToolbarLayout会对title进行放大和缩小，这一点非常重要
==========================================================================================================================
5、FloatingActionButton
    FloatingActionButton是重写ImageView的，所有FloatingActionButton拥有ImageView的一切属性。为了
    控制FloatingActionButton的大小，背景颜色，阴影的深度等，我们可以通过如下属性来控制这些效果：
     (1)app:fabSize ：FloatingActionButton的大小，有两种赋值分别是 “mini” 和 “normal”，默认是“normal”
     (2)app:backgroundTint：FloatingActionButton的背景颜色，默认的背景颜色是Theme主题中的
            <item name="colorAccent">#ff0000</item>
     (3) app:elevation ：FloatingActionButton阴影的深度，默认是有阴影的，如果觉得默认阴影深度有点大，可以改变这个属性来修改阴影深度
        注：不能通过 android:background 属性来改变 FloatingActionButton的背景颜色，只能通过app:backgroundTint属性改变，
        因为FloatingActionButton是继承自ImageView的。
      此外，还有一些其他属性：
     (4) android:layout_gravity="right|bottom":表示在右下方，这种很常见

  一、FloatingActionButton正常显示的情况下有个填充的颜色，有个阴影；点击的时候会有一个rippleColor，并且阴影的范围可以增大，那么问题来了:

  这个填充色以及rippleColor如何自定义呢？

  默认的颜色取的是，theme中的colorAccent，所以你可以在style中定义colorAccent。

  colorAccent 对应EditText编辑时、RadioButton选中、CheckBox等选中时的颜色。详细请参考：Android 5.x Theme 与 ToolBar 实战
  rippleColor默认取的是theme中的colorControlHighlight。

  我们也可以直接用过属性定义这两个的颜色：

  app:backgroundTint="#ff87ffeb"
  app:rippleColor="#33728dff"

  立体感有没有什么属性可以动态指定？
  和立体感相关有两个属性，elevation和pressedTranslationZ，前者用户设置正常显示的阴影大小；后者是点击时显示的阴影大小。
  如有以下例子
  <android.support.design.widget.FloatingActionButton
              android:layout_width="wrap_content"
              android:layout_height="wrap_content"
              android:layout_gravity="right|bottom"
              android:src="@drawable/ic_discuss"
              app:backgroundTint="#ff87ffeb"
              app:rippleColor="#33728dff"
              app:elevation="6dp"
              app:pressedTranslationZ="12dp"
              />
二、5.x存在的一些问题

在5.x的设备上运行，你会发现一些问题（测试系统5.0）：

木有阴影
记得设置app:borderWidth="0dp"。

按上述设置后，阴影出现了，但是竟然有矩形的边界（未设置margin时，可以看出）
需要设置一个margin的值。在5.0之前，会默认就有一个外边距（不过并非是margin，只是效果相同）。

so，良好的实践是：

添加属性app:borderWidth="0dp"
对于5.x设置一个合理的margin