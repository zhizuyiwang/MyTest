很多的时候，系统自带的View满足不了我们功能的需求，那么我们就需要自己来自定义一个能满足我们需求的View,自定义View我们需要先继承View，
添加类的构造方法，重写父类View的一些方法，例如onDraw，为了我们自定义的View在一个项目中能够重用，有时候我们需要自定义其属性，举个很简单的例子，
我在项目中的多个界面使用我自定义的View，每个界面该自定义View的颜色都不相同，这时候如果没有自定义属性，那我们是不是需要构建不同颜色的View出来呢，
这样子我们的代码就会显得很沉厄，所以这时候我们就需要自定义其属性来满足我们不同的需求，自定义属性呢，我们需要在values下建立attrs.xml文件，
在其中定义我们需要定义的属性，然后在自定义View中也要做相对应的修改，我们还是用一个小例子来看看自定义View和自定义属性的使用。

自定义控件的基础知识：
view在显示到屏幕上需要经历以下三个步骤：
1、Measure（测量）
首先View需要测量自身的大小，包括长和宽。 当View类的成员函数measure决定要重新测量当前View的宽度和高度之后，会去调用另外一个
成员函数onMeasure来真正执行测量宽度和高度的操作。因此，自定义View大多都需要覆写onMeasure方法来测量View的大小，onMeasure方法如下：
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }
其中widthMeasureSpec和heightMeasureSpec两个参数为父视图的建议大小。 参数measureSpec的值其实是由两部分内容来组成的，
最高2位表示一个测量模式，而低30位表示一个宽度值或者高度值，测量模式有三种，分别是MeasureSpec.EXACTLY、MeasureSpec.UNSPECIFIED和MeasureSpec.AT_MOST
Android中自定义View的MeasureSpec使用
有时，Android系统控件无法满足我们的需求，因此有必要自定义View。具体方法参见官方开发文档：http://developer.android.com/guide/topics/ui/custom-components.html

一般来说，自定义控件都会去重写View的onMeasure方法，因为该方法指定该控件在屏幕上的大小。
protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)
onMeasure传入的两个参数是由上一层控件传入的大小，有多种情况，重写该方法时需要对计算控件的实际大小，然后调用setMeasuredDimension(int, int)设置实际大小。

onMeasure传入的widthMeasureSpec和heightMeasureSpec不是一般的尺寸数值，而是将模式和尺寸组合在一起的数值。我们需要通过int mode = MeasureSpec.getMode(widthMeasureSpec)得到模式，用int size = MeasureSpec.getSize(widthMeasureSpec)得到尺寸。

mode共有三种情况，取值分别为MeasureSpec.UNSPECIFIED, MeasureSpec.EXACTLY, MeasureSpec.AT_MOST。

MeasureSpec.EXACTLY是精确尺寸，当我们将控件的layout_width或layout_height指定为具体数值时如andorid:layout_width="50dip"，或者为FILL_PARENT是，都是控件大小已经确定的情况，都是精确尺寸。

MeasureSpec.AT_MOST是最大尺寸，当控件的layout_width或layout_height指定为WRAP_CONTENT时，控件大小一般随着控件的子空间或内容进行变化，此时控件尺寸只要不超过父控件允许的最大尺寸即可。因此，此时的mode是AT_MOST，size给出了父控件允许的最大尺寸。

MeasureSpec.UNSPECIFIED是未指定尺寸，这种情况不多，一般都是父控件是AdapterView，通过measure方法传入的模式。

因此，在重写onMeasure方法时要根据模式不同进行尺寸计算。下面代码就是一种比较典型的方式：
@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    setMeasuredDimension(getMeasuredLength(widthMeasureSpec, true), getMeasuredLength(heightMeasureSpec, false));
}


private int getMeasuredLength(int length, boolean isWidth) {
    int specMode = MeasureSpec.getMode(length);
    int specSize = MeasureSpec.getSize(length);
    int size;
    int padding = isWidth ? getPaddingLeft() + getPaddingRight()
            : getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.EXACTLY) {
        size = specSize;
    } else {
        size = isWidth ? padding + mWave.length / 4 : DEFAULT_HEIGHT
                + padding;
        if (specMode == MeasureSpec.AT_MOST) {
            size = Math.min(size, specSize);
        }
    }
    return size;
}

2、Layout(布局)
这个过程只在View容器（ViewGroup及其子类）有用，因为非容器类View在屏幕中的位置操作由父控件来决定，所以不需要覆写onLayout()方法。
3、Draw（绘制）
  最后绘制View的过程，在这个过程里主要通过Paint对象在Canvas上面绘制相应图像，最终把View展现在屏幕上。 对于自定义View来说，通常需要覆写onDraw()方法绘制View。


自定义属性的步骤：
对于自定义属性，大家肯定都不陌生，遵循以下几步，就可以实现：
1、自定义一个CustomView(extends View )类
2、编写values/attrs.xml，在其中编写styleable和item等标签元素
3、在布局文件中CustomView使用自定义的属性（注意namespace）
4、在CustomView的构造方法中通过TypedArray获取


首先，我们先认识一下什么是自定义属性，以及其详解
1、reference:参考某一资源ID
    属性定义：
        <declare-styleable name="名称">
            <attr name="background" format="reference">
        <declare-styleable>
    属性使用：
        <ImageView

            android:layout_width = "42dip"
            android:layout_height = "42dip"
            android:background = "@drawable/图片ID"/>

2、color:颜色值
    属性定义：
        <declare-styleable name = "名称">
            <attr name = "textColor" format = "color" />
        </declare-styleable>
    属性使用：
          <TextView
             android:layout_width = "42dp"
             android:layout_height = "42dp"
             android:textColor = "#00FF00"/>
3、boolean：布尔值
    属性定义：
        <declare-styleable name = "名称">
            <attr name = "focusable" format = "boolean" />
        </declare-styleable>
    属性使用：
          <Button
             android:layout_width = "42dp"
             android:layout_height = "42dp"
             android:focusable = "true"/>

4、dimension：尺寸值
    属性定义：
        <declare-styleable name = "名称">
            <attr name = "layout_width" format = "dimension" />
        </declare-styleable>
    属性使用：
          <Button
             android:layout_width = "42dp"
             android:layout_height = "42dp"
          />

5、float：浮点型
    属性定义：
        <declare-styleable name = "AlphaAnimation">
            <attr name = "fromAlpha" format = "float" />
            <attr name = "toAlpha" format = "float" />
        </declare-styleable>
    属性使用：
          <alpha
            android:fromAlpha = "1.0"
            android:toAlpha = "0.7"/>

6、integer:整形值
    属性定义：
        <declare-styleable name = "AnimatedRotateDrawable">
               <attr name = "visible" />
               <attr name = "frameDuration" format="integer" />
               <attr name = "framesCount" format="integer" />
               <attr name = "pivotX" />
               <attr name = "pivotY" />
               <attr name = "drawable" />
        </declare-styleable>
    属性使用：
          <animated-rotate
               xmlns:android = "http://schemas.android.com/apk/res/android"
               android:drawable = "@drawable/图片ID"
               android:pivotX = "50%"
               android:pivotY = "50%"
               android:framesCount = "12"
               android:frameDuration = "100"/>

7、string：字符串

    属性定义：
        <declare-styleable name = "名称">
             <attr name = "apiKey" format = "string" />
        </declare-styleable>
    属性使用：
         <com.google.android.maps.MapView
             android:layout_width = "fill_parent"
             android:layout_height = "fill_parent"
             android:apiKey = "0jOkQ80oD1JL9C6HAja99uGXCRiS2CGjKO_bc_g"/>

8、fraction:百分数
    属性定义：
        <declare-styleable name = "名称">
           <attr name = "visible" />
           <attr name = "fromDegrees" format = "float" />
           <attr name = "toDegrees" format = "float" />
           <attr name = "pivotX" format = "fraction" />
           <attr name = "pivotY" format = "fraction" />
           <attr name = "drawable" />
        </declare-styleable>
    属性使用：
      <rotate
         xmlns:android = "http://schemas.android.com/apk/res/android"
　　      android:interpolator = "@anim/动画ID"
         android:fromDegrees = "0"
　　      android:toDegrees = "360"
         android:pivotX = "200%"
         android:pivotY = "300%"
　　      android:duration = "5000"
         android:repeatMode = "restart"
         android:repeatCount = "infinite"/>


9、enum:枚举类型
    属性定义：
        <declare-styleable name = "名称">
            <attr name = "orientation">
                <enum name="horizontal" value="0"/>
                <enum name="vertical" value="1"/>
            </attr>
        </declare-styleable>
    属性使用：
          <LinearLayout
               xmlns:android = "http://schemas.android.com/apk/res/android"
               android:orientation = "vertical"
               android:layout_width = "fill_parent"
               android:layout_height = "fill_parent"
          </LinearLayout>


10、flag:位或运算
    属性定义：
        <declare-styleable name = "名称">
             <attr name="windowSoftInputMode">
                <flag name = "stateUnspecified" value = "0" />
                <flag name = "stateUnchanged" value = "1" />
                <flag name = "stateHidden" value = "2" />
                <flag name = "stateAlwaysHidden" value = "3" />
                <flag name = "stateVisible" value = "4" />
                <flag name = "stateAlwaysVisible" value = "5" />
                <flag name = "adjustUnspecified" value = "0x00" />
                <flag name = "adjustResize" value = "0x10" />
                <flag name = "adjustPan" value = "0x20" />
                <flag name = "adjustNothing" value = "0x30" />
            </attr>
       </declare-styleable>
    属性使用：
         <activity
               android:name = ".StyleAndThemeActivity"
               android:label = "@string/app_name"
               android:windowSoftInputMode = "stateUnspecified | stateUnchanged　|　stateHidden">
               <intent-filter>
                      <action android:name = "android.intent.action.MAIN" />
                      <category android:name = "android.intent.category.LAUNCHER" />
               </intent-filter>
         </activity>


属性定义时可以指定多种类型值。

    （1）属性定义：

            <declare-styleable name = "名称">

                <attr name = "background" format = "reference|color" />

            </declare-styleable>

    （2）属性使用：

             <ImageView

                     android:layout_width = "42dp"
                     android:layout_height = "42dp"
                     android:background = "@drawable/图片ID|#00FF00" />



其次，我们再来看一下如何使用自定义的属性：
如：定义一个属性
<?xml version="1.0" encoding="UTF-8"?>
<resources>
    <declare-styleable name="RoundProgressBar">
        <attr name="roundColor" format="color"/>
        <attr name="roundProgressColor" format="color"/>
        <attr name="roundWidth" format="dimension"></attr>
        <attr name="textColor" format="color" />
        <attr name="textSize" format="dimension" />
        <attr name="max" format="integer"></attr>
        <attr name="textIsDisplayable" format="boolean"></attr>
        <attr name="style">
            <enum name="STROKE" value="0"></enum>
            <enum name="FILL" value="1"></enum>
        </attr>
    </declare-styleable>
</resources>
在布局中使用文件，操作如下：
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:android_custom="http://schemas.android.com/apk/res/com.example.circlepregress"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent" >


    <com.example.roundprogressbar.RoundProgressBar
        android:id="@+id/roundProgressBar2"
        android:layout_width="80dip"
        android:layout_height="80dip"
        android:layout_alignLeft="@+id/roundProgressBar1"
        android:layout_alignParentBottom="true"
        android:layout_marginBottom="78dp"


        android_custom:roundColor="#D1D1D1"
        android_custom:roundProgressColor="@android:color/black"
        android_custom:textColor="#9A32CD"
        android_custom:textIsDisplayable="false"
        android_custom:roundWidth="10dip"
        android_custom:textSize="18sp"/>
</RelativeLayout>
必须在界面布局的最顶层加上
 xmlns:android_custom="http://schemas.android.com/apk/res/com.example.circlepregress"这个即命名空间，
android_custom是自定义属性的前缀，什么意思呢？对于android系统控件我们定义其控件属性是用android:XXX="XXXXXXX",而我们自己定义的就用android_custom:XXX = "XXXXXX"
com.example.circlepregress则是我们的包的名字
在代码中使用属性，就使用自定义属性时的set和get方法了

注意，在studio中布局中是这样使用的xmlns:android_custom="http://schemas.android.com/apk/res-auto

在自定义控件中需要注意的问题：
1、一般在自定义的控件构造函数中来进行画笔等对象的初始化
2、在Android中设置数字类型的参数时如果没有特别的说明，参数的单位一般都为px像素。
3、注意：当setStrokeWidth(0)的时候描边宽度并不为0而是只占一个像素
4、postInvalidate()；用它替代我们原来的invalidate()，两者都可以重绘，调用onDraw()方法
而postInvalidate是线程安全的，也就是说可以在子线程中使用它来重绘，invalidate（）只能在主线程中使用
5、而且我发现，先测量后绘制，也就是说onMeasure()方法要先执行，然后在执行onDraw()方法，并且onMeasure()方法会执行两次，
在执行第一次的时候getWidth()和getHeight()得到的数值是0，在执行第二次时才会有数值

6、子定义控件由getWidth()和getHeight()得到的宽高是自定义的控件在布局中决定的，并且在自定义控件中会有以坐标画的
图（圆、弧、线等），这些图依赖的坐标原点都是自定义控件在布局中所指定的位置大小决定的如：
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="com.hsf.cosutomView.MainActivity"
    android:orientation="vertical">

    <com.hsf.cosutomView.view.CustomeView
        android:id="@+id/customView"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_marginLeft="200dp">
    </com.hsf.cosutomView.view.CustomeView>
</LinearLayout>

此时控件CustomeView的位置就在距离界面200多dp地方的一个高100dp，宽100dp的区域内，在这个小区域内作为画布，并以左上角为
坐标原点
