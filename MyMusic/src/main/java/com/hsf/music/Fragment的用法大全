Fragment的生命周期
Fragment必须是依存于Activity而存在的，因此Activity的生命周期会直接影响到Fragment的生命周期。
以下为Activity和Fragment的生命周期关系：

Activity的生命周期：
Created——Started——Resumed——Paused——Stopped——Destroyed
Fragment的生命周期：
onAttach——onCreate——onCreateView——onActivityCreated——onStart——onResume——onPause——onStop——onDestroyView——onDestroy——onDetach

可以看到Fragment比Activity多了几个额外的生命周期回调方法：
onAttach(Activity)
当Fragment与Activity发生关联时调用。
onCreateView(LayoutInflater, ViewGroup,Bundle)
创建该Fragment的视图
onActivityCreated(Bundle)
当Activity的onCreate方法返回时调用
onDestroyView()
与onCreateView想对应，当该Fragment的视图被移除时调用
onDetach()
与onAttach相对应，当Fragment与Activity关联被取消时调用
注意：除了onCreateView，其他的所有方法如果你重写了，必须调用父类对于该方法的实现，
====================================================================================================================

Fragment的使用方式
一、静态使用Fragment
这是使用Fragment最简单的一种方式，把Fragment当成普通的控件，直接写在Activity的布局文件中。步骤：
1、继承Fragment，重写onCreateView决定Fragment的布局
2、在Activity中声明此Fragment，就当和普通的View一样
3、注意，当做控件写在Activity布局中时，fragment的名字为该fragment的引用
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent" >

    <fragment
        android:id="@+id/id_fragment_title"
        android:name="com.zhy.zhy_fragments.TitleFragment"
        android:layout_width="fill_parent"
        android:layout_height="45dp" />

    <fragment
        android:layout_below="@id/id_fragment_title"
        android:id="@+id/id_fragment_content"
        android:name="com.zhy.zhy_fragments.ContentFragment"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent" />

</RelativeLayout>

二、动态的使用Fragment：
    在这里也有两种方式来实现动态加载Fragment，用replace()和add,show,hide的组合使用,但不要忘记到最后都要commit一下
    先介绍下基础知识
    Fragment家族常用的API：
    Fragment常用的三个类：
    android.app.Fragment 主要用于定义Fragment
    android.app.FragmentManager 主要用于在Activity中操作Fragment
    android.app.FragmentTransaction 保证一些列Fragment操作的原子性

    a、获取FragmentManage的方式：
    getFragmentManager() // v4中，getSupportFragmentManager
    b、主要的操作都是FragmentTransaction的方法
    FragmentTransaction transaction = fm.beginTransatcion();//开启一个事务
    transaction.add()
    往Activity中添加一个Fragment
    transaction.remove()
    从Activity中移除一个Fragment，如果被移除的Fragment没有添加到回退栈，这个Fragment实例将会被销毁。
    transaction.replace()
    使用另一个Fragment替换当前的，实际上就是remove()然后add()的合体~
    transaction.hide()
    隐藏当前的Fragment，仅仅是设为不可见，并不会销毁
    transaction.show()
    显示之前隐藏的Fragment
    detach()
    会将view从UI中移除,和remove()不同,此时fragment的状态依然由FragmentManager维护。
    attach()
    重建view视图，附加到UI上并显示。
    transaction.commit()//提交一个事务
    注意：常用Fragment的哥们，可能会经常遇到这样Activity状态不一致：State loss这样的错误。主要是因为：commit方法一定要在Activity.onSaveInstance()之前调用。
    上述，基本是操作Fragment的所有的方式了，在一个事务开启到提交可以进行多个的添加、移除、替换等操作。
    ===========================================================================================================================================
    值得注意的是：如果你喜欢使用Fragment，一定要清楚这些方法，哪个会销毁视图，哪个会销毁实例，哪个仅仅只是隐藏，这样才能更好的使用它们。

    a、比如：我在FragmentA中的EditText填了一些数据，当切换到FragmentB时，如果希望会到A还能看到数据，则适合你的就是hide和show；
        也就是说，希望保留用户操作的面板，你可以使用hide和show，当然了不要使劲在那new实例，进行下非null判断。

    b、再比如：我不希望保留用户操作，你可以使用remove()，然后add()；或者使用replace()这个和remove,add是相同的效果。

    c、remove和detach有一点细微的区别，在不考虑回退栈的情况下，remove会销毁整个Fragment实例，而detach则只是销毁其视图结构，
        实例并不会被销毁。那么二者怎么取舍使用呢？如果你的当前Activity一直存在，那么在不希望保留用户操作的时候，你可以优先使用detach。

============================================================================================================================
Fragment的中级用法，主要解决一下问题：
    1、如何管理Fragment回退栈
    2、Fragment如何与Activity交互
    3、Fragment与Activity交互的最佳实践
    4、没有视图的Fragment的用处
    5、使用Fragment创建对话框，如何与ActionBar，MenuItem集成等~~

1、管理Fragment的回退栈
    类似于android为Activity维护一个任务栈，我们也可以通过Activity为Fragment维护一个回退栈来保存每次Fragment事务发生的变化，如果将Fragment任务加到
    回退栈，在用户点击返回按钮时，可以看到上次保存的Fragment,一旦Fragment完全从回退栈退出，再点击返回键，就会退出当前Activity

    如何添加一个Fragment事务到回退栈：
    FragmentTransaction.addToBackStack();方法用来把当前的事务添加到回退栈中，此方法一调用，被替换的或被隐藏的Fragment的实例是不会被销毁的

    比如有三个Fragment，一个Activity，在第一个Fragment实例化并添加到Activity后会显示出来，即事务的add()方法.
    第二个Fragment要显示在Activity上去时有两种方式，第一种方式为：在事务调用addToBackStack()方法后，若此时事务使用replace()显示第二个，
    第一个Fragment实例是不会被销毁的，但其视图层是会被销毁的，即会会调用onDestroyView和onCreateView方法。
    第二种方法是：先隐藏第一个Fragment，再添加第二个Fragment实例，然后添加事务到回退栈，此时，第一个Fragment是不会被销毁的，并且视图也不会被销毁


